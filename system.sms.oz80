;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

;SEGA ROM Header:
;===================================================================================================
TYPE    #SMS_HEADER
[       ;property name              ;size                   ;default content
        .ID                         BYTE x 8                ;!"TMR SEGA"
        .RESERVED                   BYTE x 2                ;!"  "
        .CHECKSUM                   WORD        
        .PRODUCT_LOW                BYTE        
        .PRODUCT_MED                BYTE        
        .PRODUCT_HI                 NYBL        
        .VERSION                    NYBL                    ;!0
        .REGION                     NYBL                    ;!4
        .SIZE                       NYBL                    ;!$C
]

;SEGA Master System Memory Map
;===================================================================================================
;; Define a page of RAM that fills the address-space;
   The default main RAM (`$`) where you place your game variables will be defined by
   the `SYSTEM` statement, this RAM page describes the whole memory map rather than
   just the 'work RAM' where game variables go
;;
PAGE    $_SMS
RAM     $_SMS
[
        .SLOT0                      BYTE x 16 KB                                            ;$0000
        .SLOT1                      BYTE x 16 KB                                            ;$4000
        .SLOT2                      BYTE x 16 KB                                            ;$8000
        .RAM                        TYPE                                                    ;$C000
        [                                                
            .                       BYTE x (8 KB - 16)
            ;the typical default location of the Stack Pointer, which works downwards 
            .STACK                  BYTE                                                    ;$DFF0
        ]
        
        ;the RAM is mirrored in the next 8 KB
        .MIRROR                     BYTE x (8 KB - 8)                                       ;$E000
        
        .GLASSES                    BYTE x 4                                                ;$FFF8-
                                                                                            ;$FFFB
        ;mapper: (bank switching)
        ;-------------------------------------------------------------------------------------------
        ;; the banking of the cartridge ROM into the slots of the Z80 address space is handled by
           the mapper chip. for standard SEGA mappers, writing to $FFFC configures the mapper and
           $FFFD/E/F sets the ROM bank number to page into the relevant memory slot.
           for more details, see http://www.smspower.org/Development/Mappers
        ;;
        .MAPPER                     TYPE                                                    ;$FFFC
        [
            ;; bank shifting is documented, but was never used
               http://smspower.org/Development/Mappers#ROMBankShifting ;;
            .BankShift              BOOL x 2
            .RAMBank                BOOL                    ;switches SRAM banks in Slot 2
            .RAM8000                BOOL                    ;enable SRAM bank at $8000 (Slot 1)
            .RAMC000                BOOL                    ;enable SRAM bank at $C000 (Slot 2)
            .                       BOOL x 2                ;unused bits
            
            ;; the write-protect bit for the ROM would only be used during
               development and has no function or purpose for releases ;;
            .WriteProtect           BOOL
            
            .SLOT0                  BYTE                                                    ;$FFFD
            .SLOT1                  BYTE                                                    ;$FFFE
            .SLOT2                  BYTE                                                    ;$FFFF
        ]
]

;---------------------------------------------------------------------------------------------------
PAGE    $_SMS_PORTS $0000 $FF
RAM     $_SMS_PORTS
[
        .                           BYTE x $3E
        
        .REGION                     BYTE                                                    ;[$3E]
        
        .CONTROL                    TYPE                                                    ;[$3F]
        [
            .                       BOOL x 2                ;unused
            .IO                     BOOL
            .BIOS                   BOOL                    ;enable BIOS shadow ($0000-$03FF)
            .RAM                    BOOL                    ;enable RAM
            .CARD                   BOOL                    ;enable card-slot
            .CART                   BOOL                    ;enable cartridge-slot
            .EXPANSION              BOOL                    ;enable expansion-slot
        ]
        
        .SCANLINE                   BYTE                    ;read current vertical scanline ;[$7E]
        
        .PSG                        BYTE                    ;data port for sound chip       ;[$7F]
        
        .                           BYTE x ($BE - $7F)
        
        ;VDP:
        ;-------------------------------------------------------------------------------------------
        ;; the Video Display Processor handles the graphics and sprites stored in video RAM
           ("VRAM"), composites the display and outputs it to the screen ;;
        .VDP                        TYPE
        [
            .DATA                   BYTE                                                    ;[$BE]
            .CONTROL                BYTE                                                    ;[$BF]
        ]
        
        .                           BYTE x ($DC - $BF)
        
        ;-------------------------------------------------------------------------------------------
        .JOY                        TYPE
        [
            .A                      TYPE                                                    ;[$DC]
            [
                .pad1up             BOOL
                .pad1down           BOOL
                .pad1left           BOOL
                .pad1right          BOOL
                .pad1button1        BOOL
                .pad1button2        BOOL
                .pad2up             BOOL
                .pad2down           BOOL
            ]
            .B                      TYPE                                                    ;[$DD]
            [
                .pad2left           BOOL
                .pad2right          BOOL
                .pad2button1        BOOL
                .pad2button2        BOOL
                .reset              BOOL                    ;reset button
                .                   BOOL                    ;unused
                .lightgun1          BOOL
                .lightgun2          BOOL
            ]
        ]
]

PAGE    $_SMS_VRAM  $0000 16 KB
RAM     $_SMS_VRAM
[
        .                           BYTE x $37FF
        .SCREENNAMETABLE            WORD
]