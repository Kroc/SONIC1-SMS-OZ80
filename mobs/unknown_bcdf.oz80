;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

PROC    :_bcdf                                  SECTION ::mobs                  ;$BCDF
        ;==============================================================================
PARAMS  IX`mob          ``Address of the current mob being processed
{
        set     5,[ix+#mob.flags]               ;mob does not collide with the floor
        set     5,[iy+#vars.unknown0]
        ld      hl,$0202
        ld      [$.TEMP6],hl
        call    :detectCollisionWithSonic
        jr      c,._1
        bit     0,[iy+#vars.scrollRingFlags]
        call    z,:hitPlayer._35fd
        jp      ._8
        
._1     ld      a,[ix+#mob.unknown11]
        cp      $c8
        jp      c,._6
        ld      e,[ix+#mob.X+0]
        ld      d,[ix+#mob.X+1]
        ld      hl,[$.CAMERA_X]
        ld      bc,$fff4
        add     hl,bc
        and     a
        sbc     hl,de
        jp      nc,._8
        ld      hl,[$.CAMERA_X]
        inc     h
        and     a
        sbc     hl,de
        jp      c,._8
        ld      hl,[$.SONIC.X]
        and     a
        sbc     hl,de
        ld      l,[ix+#mob.Xspeed+0]
        ld      h,[ix+#mob.Xspeed+1]
        ld      a,[ix+#mob.Xdirection]
        jr      nc,._2
        ld      c,$ff
        ld      de,$fff4
        bit     7,a
        jr      nz,._3
        ld      de,$ffe8
        jr      ._3

._2     ld      c,$00
        ld      de,$000c
        bit     7,a
        jr      z,._3
        ld      de,$0018
._3     add     hl,de
        adc     a,c
        ld      [ix+#mob.Xspeed+0],l
        ld      [ix+#mob.Xspeed+1],h
        ld      [ix+#mob.Xdirection],a
        ld      e,[ix+#mob.Y+0]
        ld      d,[ix+#mob.Y+1]
        ld      hl,[$.CAMERA_Y]
        ld      bc,$fff4
        add     hl,bc
        and     a
        sbc     hl,de
        jr      nc,._8
        ld      hl,[$.CAMERA_Y]
        ld      bc,$00c0
        add     hl,de
        and     a
        sbc     hl,de
        jr      c,._8
        ld      hl,[$.SONIC.Y]
        and     a
        sbc     hl,de
        ld      l,[ix+#mob.Yspeed+0]
        ld      h,[ix+#mob.Yspeed+1]
        ld      a,[ix+#mob.Ydirection]
        jr      nc,._4
        ld      c,$ff
        ld      de,$fff6
        bit     7,a
        jr      nz,._5
        ld      de,$fffb
        jr      ._5
        
._4     ld      de,$000a
        ld      c,$00
        bit     7,a
        jr      z,._5
        ld      de,$0005
._5     add     hl,de
        adc     a,c
        ld      [ix+#mob.Yspeed+0],l
        ld      [ix+#mob.Yspeed+1],h
        ld      [ix+#mob.Ydirection],a
        jr      ._7
._6     inc     [ix+#mob.unknown11]
._7     ld      bc,._bdc7
        ld      de,._bdce
        call    :_7c41
        bit     4,[iy+#vars.unknown0]
        ret     nz
._8     ld      [ix+#mob.type],$FF      ;remove object?
        res     5,[iy+#vars.unknown0]
        ret
        
._bdc7  BYTE $00, $01, $01, $01, $02, $01, $FF

        ;sprite layout
._bdce  BYTE $44, $46, $FF, $FF, $FF, $FF
        BYTE $FF, $FF, $FF, $FF, $FF, $FF
        BYTE $FF, $FF, $FF, $FF, $FF, $FF

        BYTE $48, $08, $FF, $FF, $FF, $FF
        BYTE $FF, $FF, $FF, $FF, $FF, $FF
        BYTE $FF, $FF, $FF, $FF, $FF, $FF

        BYTE $60, $62, $FF, $FF, $FF, $FF
        BYTE $FF
}