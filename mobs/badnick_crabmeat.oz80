;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

;badnick - crabmeat

PROC    :mob_badnick_crabMeat                               SECTION ::mobs                  ;$65EE
        ;===========================================================================================
PARAMS  IX`mob          ``Address of the current mob being processed
{       
        ;define the size of the mob
        ;TODO: we don't need to do this every frame. we could set this up when the mob spawns
        ld      [IX`mob+#mob.width]     16
        ld      [IX`mob+#mob.height]    31
        
        ld      E                   [IX`mob+$12]
        ld      D                   $00
        
        ;select frame of animation:
        ;-------------------------------------------------------------------------------------------
        
._1     ld      HL                  ._66c5
        add     HL                  DE
        ld      [$.TEMP6]           HL
        ld      A                   [HL]
        and     A
        jr      nz  ._2
        
        ;when we hit the end of the animation list, start over
        ld      [IX`mob+$12]        A                       ;set the mob's counter to 0
        ld      E                   A                       ;and likewise with the working copy
        jp      ._1                                         ;proceed with next frame of animation
        
        ;-------------------------------------------------------------------------------------------
        
._2     dec     A
        jr      nz  ._3
        ld      C                   $00
        ld      H                   C
        ld      L                   $28
        jp      ._6
        
        ;-------------------------------------------------------------------------------------------
        
._3     dec     A
        jr      nz  ._4
        ld      C                   $FF
        ld      HL                  $FFD8
        jp      ._6
        
        ;-------------------------------------------------------------------------------------------
        
._4     dec     A
        jr      nz  ._5
        ld      C                   $00
        ld      L                   C
        ld      H                   C
        jp      ._6
        
        ;-------------------------------------------------------------------------------------------
        
._5     ld      A                   [IX`mob+#mob.unknown11]
        cp      $20
        jp      nz  ._7
        
        ld      HL                  $FFFF
        ld      [$.TEMP4]           HL
        ld      HL                  $FFFC
        ld      [$.TEMP6]           HL
        
        call    :findEmptyMob
        jp      c   ._7
        
        ld      DE                  $0000
        ld      C                   E
        ld      B                   D
        call    :_ac96
        
        ld      HL                  $0001
        ld      [$.TEMP4]           HL
        ld      HL                  $FFFC
        ld      [$.TEMP6]           HL
        
        call    :findEmptyMob
        jr      c   ._7
        
        ld      DE                  $000E
        ld      BC                  $0000
        call    :_ac96
        
        ld      A                   $0A
        rst     :rst_playSFX
        
        jp      ._7
        
        ;-------------------------------------------------------------------------------------------
        
        ;update the mob's speed and direction
._6     ld      [IX`mob+#mob.Xspeed+0]      L
        ld      [IX`mob+#mob.Xspeed+1]      H
        ld      [IX`mob+#mob.Xdirection]    C
        
._7     ld      L                   [IX`mob+#mob.unknown11]
        ld      H                   [IX`mob+$12]
        ld      DE                  $0008
        add     HL                  DE
        ld      [IX`mob+#mob.unknown11] L
        ld      [IX`mob+$12]            H
        ld      L                   [IX`mob+#mob.Yspeed+0]
        ld      H                   [IX`mob+#mob.Yspeed+1]
        ld      A                   [IX`mob+#mob.Ydirection]
        ld      DE                  $0020
        add     HL                  DE
        adc     A                   D
        ld      [IX`mob+#mob.Yspeed+0]      L
        ld      [IX`mob+#mob.Yspeed+1]      H
        ld      [IX`mob+#mob.Ydirection]    A
        ld      HL                  [$.TEMP6]
        ld      A                   [HL]
        add     A                   A
        ld      E                   A
        ld      HL                  ._66e0
        add     HL                  DE
        ld      C                   [HL]
        inc     HL
        ld      B                   [HL]
        ld      DE                  .layout
        call    :animateMob
        
        ld      HL                  $0A04
        ld      [$.TEMP6]           HL
        call    :detectCollisionWithSonic
        
        ld      HL                  $0804
        ld      [$.TEMP1]           HL
        call    nc  :hitPlayer
        
        ret
    
        ;-------------------------------------------------------------------------------------------
        
        ;what action to take on each frame:
        
._66c5  BYTE    $01 $01 $01 $01 $01 $01 $01 $01 $01 $01
        BYTE    $03 $03
        BYTE    $04
        BYTE    $02 $02 $02 $02 $02 $02 $02 $02 $02 $02
        BYTE    $03 $03
        BYTE    $04
        BYTE    $00

._66e0  WORD    ._66ea ._66ea ._66ea ._66f3 ._66f6

._66ea  BYTE    $00 $0C $01 $0C $02 $0C $01 $0C $FF
._66f3  BYTE    $01 $01 $FF
._66f6  BYTE    $03 $01 $FF        
        
        ;sprite layouts                                                                     ;$66F9
.layout BYTE    $00 $02 $04 $FF $FF $FF
        BYTE    $20 $22 $24 $FF $FF $FF
        BYTE    $FF $FF $FF $FF $FF $FF

        BYTE    $00 $02 $44 $FF $FF $FF
        BYTE    $46 $22 $4A $FF $FF $FF
        BYTE    $FF $FF $FF $FF $FF $FF

        BYTE    $40 $02 $44 $FF $FF $FF
        BYTE    $26 $22 $2A $FF $FF $FF
        BYTE    $FF $FF $FF $FF $FF $FF

        BYTE    $40 $02 $04 $FF $FF $FF
        BYTE    $46 $22 $4A $FF $FF $FF
        BYTE    $FF
}