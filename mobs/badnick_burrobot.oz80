;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

;badnick - Burrobot (Labyrinth)

PROC    :mob_badnick_burrobot                               SECTION ::mobs                  ;$8F6D
        ;===========================================================================================
PARAMS  IX`mob          ``Address of the current mob being processed
{
        ;define the size of the mob
        ;TODO: we don't need to do this every frame. we could set this up when the mob spawns
        ld      [IX`mob+#mob.width]     12
        ld      [IX`mob+#mob.height]    32
        
        ;check for collision with Sonic. use a 2px offset on the sprite
        ;TODO: need a means of dynamically generating this 16-bit number from mob specification
        ld      HL`offset           $0202
        ld      [$.TEMP6]           HL`offset
        call    :detectCollisionWithSonic
        
        ;if carry is clear, the play took a hit:
        ;define the x/y offset of where to place the explosion
        ld      HL`explosionOffset  $0800
        ld      [$.TEMP1]           HL`explosionOffset
        call    nc  :hitPlayer
        
        ld      L                   [IX`mob+#mob.Yspeed+0]
        ld      H                   [IX`mob+#mob.Yspeed+1]
        ld      A                   [IX`mob+#mob.Ydirection]
        ld      DE                  $0010
        add     HL                  DE
        adc     A                   $00
        ld      C                   A
        jp      m   ._1
        ld      A                   H
        cp      $04
        jr      c   ._1
        ld      HL                  $0300
        ld      C                   $00
        
._1     ld      [IX`mob+#mob.Yspeed+0]      L
        ld      [IX`mob+#mob.Yspeed+1]      H
        ld      [IX`mob+#mob.Ydirection]    C
        
        bit     0   [IX`mob+#mob.flags]
        jp      nz  ._4
        
        ld      DE                  $FFD0
        ld      L                   [IX`mob+#mob.X+0]
        ld      H                   [IX`mob+#mob.X+1]
        add     HL                  DE
        ld      DE                  [$.SONIC.X]
        and     A
        sbc     HL                  DE
        jr      nc  ._2
        ld      BC                  $0030
        ld      L                   [IX`mob+#mob.X+0]
        ld      H                   [IX`mob+#mob.X+1]
        add     HL                  BC
        and     A
        sbc     HL                  DE
        jr      c   ._2
        set     0   [IX`mob+#mob.flags]
        ld      [IX`mob+#mob.Yspeed+0]      $80
        ld      [IX`mob+#mob.Yspeed+1]      $FD
        ld      [IX`mob+#mob.Ydirection]    $FF
._2     ld      L                   [IX`mob+#mob.X+0]
        ld      H                   [IX`mob+#mob.X+1]
        ld      DE                  [$.SONIC.X]
        and     A
        sbc     HL                  DE
        jr      c   ._3
        ld      [IX`mob+#mob.Xspeed+0]      $C0
        ld      [IX`mob+#mob.Xspeed+1]      $FF
        ld      [IX`mob+#mob.Xdirection]    $FF
        ld      DE                  ._9059
        ld      BC                  ._904a
        call    :animateMob
        set     1   [IX`mob+#mob.flags]
        ret
        
._3     ld      [IX`mob+#mob.Xspeed+0]      $40
        ld      [IX`mob+#mob.Xspeed+1]      $00
        ld      [IX`mob+#mob.Xdirection]    $00
        ld      DE                  ._9059
        ld      BC                  ._9045
        call    :animateMob
        res     1   [IX`mob+#mob.flags]
        ret
        
._4     ld      BC                  ._9054
        bit     1   [IX`mob+#mob.flags]
        jr      nz  ._5
        ld      BC                  ._904f
._5     ld      DE                  ._9059
        call    :animateMob
        bit     7   [IX`mob+#mob.flags]
        ret     z
        res     0   [IX`mob+#mob.flags]
        ret
        
        ;-------------------------------------------------------------------------------------------
        
._9045  BYTE    $00, $04, $01, $04, $FF
._904a  BYTE    $02, $04, $03, $04, $FF
._904f  BYTE    $04, $04, $04, $04, $FF
._9054  BYTE    $05, $04, $05, $04, $FF

        ;sprite layout
._9059  BYTE    $44, $46, $FF, $FF, $FF, $FF
        BYTE    $64, $66, $FF, $FF, $FF, $FF
        BYTE    $FF, $FF, $FF, $FF, $FF, $FF
    
        BYTE    $44, $46, $FF, $FF, $FF, $FF
        BYTE    $48, $4A, $FF, $FF, $FF, $FF
        BYTE    $FF, $FF, $FF, $FF, $FF, $FF
    
        BYTE    $50, $52, $FF, $FF, $FF, $FF
        BYTE    $70, $72, $FF, $FF, $FF, $FF
        BYTE    $FF, $FF, $FF, $FF, $FF, $FF
    
        BYTE    $50, $52, $FF, $FF, $FF, $FF
        BYTE    $4C, $4E, $FF, $FF, $FF, $FF
        BYTE    $FF, $FF, $FF, $FF, $FF, $FF
    
        BYTE    $44, $46, $FF, $FF, $FF, $FF
        BYTE    $68, $6A, $FF, $FF, $FF, $FF
        BYTE    $FF, $FF, $FF, $FF, $FF, $FF

        BYTE $50, $52, $FF, $FF, $FF, $FF
        BYTE $6C, $6E, $FF, $FF, $FF, $FF
        BYTE $FF
}