;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

PROC    :mob_boss_jungle                        SECTION ::mobs                  ;$8053
        ;==============================================================================
PARAMS  IX`mob          ``Address of the current mob being processed
{
        set     5,[ix+#mob.flags]               ;mob does not collide with the floor
        ld      [ix+#mob.width], 32
        ld      [ix+#mob.height],28
        bit     0,[ix+#mob.flags]
        jr      nz,._1
        ld      hl,[$.SONIC.Y]
        ld      de,$00e0
        and     a
        sbc     hl,de
        ret     nc
        ld      a,[$.SONIC.flags]
        rlca    
        ret     nc
        ;boss sprite set
        ld      hl,$aeb1
        ld      de,$2000
        ld      a,9
        call    ::main:decompressArt
        
        ld      hl,:S1_BossPalette
        ld      a,%00000010
        call    ::interrupts:loadPaletteOnInterrupt
        
        ld      a,::sound:S1_MusicPointers.boss1.index ;=$0B
        rst     :rst_playMusic
        
        xor     a`zero
        ld      [$.D2EC],a`zero
        
        ;there's a routine at `_7c8c` for setting the scroll positions that should
         ;have been used here?
        ld      hl,[$.CAMERA_X]
        ld      [$.LEVEL_LEFT],hl
        ld      [$.LEVEL_RIGHT],hl
        
        ld      hl,[$.CAMERA_Y]
        ld      [$.LEVEL_TOP],hl
        ld      [$.LEVEL_BOTTOM],hl
        ld      hl,$01f0
        ld      [$.CAMERA_X_GOTO],hl
        ld      hl,$0048
        ld      [$.CAMERA_Y_GOTO],hl
        
        set     0,[ix+#mob.flags]
        
._1     call    :_7ca6
        bit     0,[ix+#mob.unknown11]
        jr      nz,._2
        ld      [ix+#mob.spriteLayout+0],LO ._81f4
        ld      [ix+#mob.spriteLayout+1],HI ._81f4
        ld      [ix+#mob.Yspeed+0],$80
        ld      [ix+#mob.Yspeed+1],$00
        ld      [ix+#mob.Ydirection],$00
        ld      l,[ix+#mob.Y+0]
        ld      h,[ix+#mob.Y+1]
        ld      de,$0058
        xor     a`zero
        sbc     hl,de
        ret     c
        ld      [ix+#mob.Yspeed+0],a`zero
        ld      [ix+#mob.Yspeed+1],a`zero
        ld      [ix+#mob.Ydirection],a`zero
        set     0,[ix+#mob.unknown11]
._2     ld      a,[ix+$12]
        and     a
        jp      nz,._4
        ld      l,[ix+#mob.X+0]
        ld      h,[ix+#mob.X+1]
        bit     1,[ix+#mob.unknown11]
        jr      nz,._3
        ld      [ix+#mob.spriteLayout+0],LO ._81f4
        ld      [ix+#mob.spriteLayout+1],HI ._81f4
        res     1,[ix+#mob.flags]
        ld      [ix+#mob.Xspeed+0],$00
        ld      [ix+#mob.Xspeed+1],$ff
        ld      [ix+#mob.Xdirection],$ff
        ld      de,$021c
        and     a
        sbc     hl,de
        jp      nc,._8
        ld      [ix+$12],$67
        jp      ._8
        
._3     ld      [ix+#mob.spriteLayout+0],LO ._8206
        ld      [ix+#mob.spriteLayout+1],HI ._8206
        set     1,[ix+#mob.flags]
        ld      [ix+#mob.Xspeed+0],$00
        ld      [ix+#mob.Xspeed+1],$01
        ld      [ix+#mob.Xdirection],$00
        ld      de,$02aa
        and     a
        sbc     hl,de
        jp      c,._8
        ld      [ix+$12],$67
        jp      ._8
        
._4     xor     a`zero
        ld      [ix+#mob.Xspeed+0],a`zero
        ld      [ix+#mob.Xspeed+1],a`zero
        ld      [ix+#mob.Xdirection],a`zero
        ld      hl,$0001
        dec     [ix+$12]
        jr      z,._5
        ld      a,[ix+$12]
        cp      $40
        jr      nc,._6
        ld      hl,$ffff
        cp      $28
        jr      c,._6
        cp      $34
        jr      z,._7
._5     ld      hl,$0000
._6     ld      [ix+#mob.Yspeed+0],$00
        ld      [ix+#mob.Yspeed+1],l
        ld      [ix+#mob.Ydirection],h
        jr      ._8
        
._7     ld      a,[ix+#mob.unknown11]
        xor     $02
        ld      [ix+#mob.unknown11],a
        ld      a,[$.D2EC]
        cp      $08
        jr      nc,._8
        call    :findEmptyMob
        ret     c
        ld      e,[ix+#mob.X+0]
        ld      d,[ix+#mob.X+1]
        ld      c,[ix+#mob.Y+0]
        ld      b,[ix+#mob.Y+1]
        push    ix
        push    hl
        pop     ix
        ld      [ix+#mob.type],$2B              ;unknown object
        xor     a`zero                          ;set A to 0
        ld      [ix+#mob.Xsubpixel],a`zero
        ld      hl,$000b
        add     hl,de
        ld      [ix+#mob.X+0],l
        ld      [ix+#mob.X+1],h
        ld      [ix+#mob.Ysubpixel],a`zero
        ld      hl,$0030
        add     hl,bc
        ld      [ix+#mob.Y+0],l
        ld      [ix+#mob.Y+1],h
        ld      [ix+#mob.Xspeed+0],a`zero
        ld      [ix+#mob.Xspeed+1],a`zero
        ld      [ix+#mob.Xdirection],a`zero
        ld      [ix+#mob.Yspeed+0],a`zero
        ld      [ix+#mob.Yspeed+1],a`zero
        ld      [ix+#mob.Ydirection],a`zero
        ld      [ix+#mob.unknown11],a`zero
        ld      [ix+#mob.unknown16],a`zero
        ld      [ix+#mob.unknown17],a`zero
        call    ::main:_LABEL_625_57
        and     $3f
        add     a,$64
        ld      [ix+$12],a
        pop     ix
._8     ld      hl,$005a
        ld      [$.D216],hl
        call    :_77be
        call    :_79fa
        ret

        ;sprite layout
._81f4  BYTE $20, $22, $24, $26, $28, $FF
        BYTE $40, $42, $44, $46, $48, $FF
        BYTE $60, $54, $56, $58, $68, $FF
._8206  BYTE $2A, $2C, $2E, $30, $32, $FF
        BYTE $4A, $4C, $4E, $50, $52, $FF
        BYTE $6A, $5A, $5C, $5E, $72, $FF
}