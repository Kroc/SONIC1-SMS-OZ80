;; Sonic 1 Master System Disassembly
   -------------------------------------------------------------------------------------------------
   created by Kroc Camen <kroc@camendesign.com> and given to the Public Domain; you may do anything
   you like with this code as long as you respect the TradeMarks and (any) Copyrights within.
   absolutely no warranty implied
   =================================================================================================
;;

PROC    :mob_boss_endSign                       SECTION ::mobs                  ;$5F17
        ;==============================================================================
PARAMS  IX`mob          ``Address of the current mob being processed
{       
        ld      [ix+#mob.width], 24
        ld      [ix+#mob.height],48
        
        bit     0,[ix+#mob.unknown11]
        jr      nz,._1
        
        res     7,[iy+#vars.flags6]
        res     3,[iy+#vars.scrollRingFlags]
        
        ;end sign sprite set
        ld      hl,$4294
        ld      de,$2000
        ld      a,9
        call    ::main:decompressArt
        
        ;load the end-sign palette
        ld      hl,.S1_EndSign_Palette
        ld      a,%00000010
        call    ::interrupts:loadPaletteOnInterrupt
        
        set     0,[ix+#mob.unknown11]
        
._1     ld      hl,[$.CAMERA_X]
        ld      [$.LEVEL_LEFT],hl
        
        ld      l,[ix+#mob.X+0]
        ld      h,[ix+#mob.X+1]
        ld      de,$FF90
        add     hl,de
        ld      [$.LEVEL_RIGHT],hl
        
        ld      hl,$0080
        ld      [$.D26B],hl
        ld      hl,$0088
        ld      [$.D26D],hl
        
        ld      c,[ix+#mob.unknown13]
        ld      a,[$.SONIC.flags]
        and     $80
        ld      [ix+#mob.unknown13],a
        jr      z,._3
        cp      c
        jr      z,._3
        bit     7,[ix+#mob.flags]
        jr      z,._3
        ld      e,[ix+#mob.X+0]
        ld      d,[ix+#mob.X+1]
        ld      hl,[$.SONIC.X]
        and     a
        sbc     hl,de
        bit     7,h
        jr      z,._2
        ld      a,l
        cpl     
        ld      l,a
        ld      a,h
        cpl     
        ld      h,a
        inc     hl
._2     ld      de,$0064
        and     a
        sbc     hl,de
        jr      nc,._3
        ld      [ix+#mob.Yspeed+0],$00
        ld      [ix+#mob.Yspeed+1],$fe
        ld      [ix+#mob.Ydirection],$ff
._3     ld      l,[ix+#mob.Yspeed+0]
        ld      h,[ix+#mob.Yspeed+1]
        ld      a,[ix+#mob.Ydirection]
        ld      de,$001a
        add     hl,de
        adc     a,$00
        ld      [ix+#mob.Yspeed+0],l
        ld      [ix+#mob.Yspeed+1],h
        ld      [ix+#mob.Ydirection],a
        bit     3,[ix+#mob.unknown11]
        jr      nz,._7
        bit     2,[ix+#mob.unknown11]
        jr      z,._4
        bit     7,[ix+#mob.flags]
        jr      z,._7
        
        ld      a,::sound:S1_MusicPointers.actComplete.index   ;=$09
        rst     :rst_playMusic
        
        ld      a,$0c
        rst     :rst_playSFX
        
        res     2,[ix+#mob.unknown11]
        set     3,[ix+#mob.unknown11]
        ld      a,$a0
        ld      [$.D289],a
        set     1,[iy+#vars.flags6]
        jp      ._7
        
._4     ld      hl,$0a0a
        ld      [$.TEMP6],hl
        call    :detectCollisionWithSonic
        jr      c,._7
        bit     7,[ix+#mob.Ydirection]
        jr      nz,._7
        bit     1,[ix+#mob.unknown11]
        jr      nz,._7
        ld      de,[$.SONIC.Xspeed]
        bit     7,d
        jr      z,._5
        ld      a,e
        cpl     
        ld      e,a
        ld      a,d
        cpl     
        ld      d,a
        inc     de
._5     ld      hl,$0300
        and     a
        sbc     hl,de
        jr      nc,._6
        ld      de,$0300
._6     ex      de,hl
        add     hl,hl
        ld      [ix+#mob.unknown14],l
        ld      [ix+#mob.unknown15],h
        ld      [ix+$12],$00
        set     1,[ix+#mob.unknown11]
        res     3,[iy+#vars.flags6]
        ld      a,$0b
        rst     :rst_playSFX
        
._7     ld      de,._6157
        bit     1,[ix+#mob.unknown11]
        jr      nz,._
        bit     2,[ix+#mob.unknown11]
        jr      nz,._
        ld      de,$6171
        bit     3,[ix+#mob.unknown11]
        jr      z,._
        ld      a,[$.CURRENT_LEVEL]
        cp      $0c
        jr      c,._8
        cp      $1c
        jr      c,._9
        ld      de,$618e
        ld      c,$01
        jr      ._11
        
._8     ld      de,$61a8
        ld      c,$04
        ld      a,[$.RINGS]
        cp      $50
        jr      nc,._11
._9     cp      $40
        jr      z,._10
        ld      de,$61c2
        ld      c,$03
        and     $0f
        jr      z,._11
._10    ld      a,[$.RINGS]
        srl     a
        srl     a
        srl     a
        srl     a
        ld      b,a
        ld      a,[$.CURRENT_LEVEL]
        and     $03
        inc     a
        ld      de,$6174
        ld      c,$02
        cp      b
        jr      z,._11
        ld      de,$618e
        ld      c,$01
._11    ld      a,c
        ld      [$.D288],a
._      ld      l,[ix+$12]
        ld      h,$00
        add     hl,de
        ld      a,[hl]
        cp      $ff
        jr      nz,._12
        inc     hl
        ld      a,[hl]
        ld      [ix+$12],a
        jp      ._
        
._12    ld      l,a
        ld      h,$00
        add     hl,hl
        ld      e,l
        ld      d,h
        add     hl,hl
        add     hl,hl
        add     hl,hl
        add     hl,de
        ld      de,._61dc
        add     hl,de
        ld      [ix+#mob.spriteLayout+0],l
        ld      [ix+#mob.spriteLayout+1],h
        bit     1,[ix+#mob.unknown11]
        jr      nz,._13
        inc     [ix+$12]
        ret
        
._13    ld      a,[ix+#mob.unknown14]
        add     a,[ix+#mob.unknown16]
        ld      [ix+#mob.unknown16],a
        ld      a,[ix+#mob.unknown15]
        push    af
        adc     a,[ix+#mob.unknown17]
        ld      [ix+#mob.unknown17],a
        pop     af
        adc     a,[ix+$12]
        cp      $18
        jr      c,._14
        xor     a`zero
._14    ld      [ix+$12],a`zero
        ld      e,[ix+#mob.Yspeed+0]
        ld      d,[ix+#mob.Yspeed+1]
        ld      a,[ix+#mob.Ydirection]
        and     a
        jp      p,._15
        ld      hl,$fc00
        sbc     hl,de
        ret     nc
._15    ex      de,hl
        ld      e,[ix+#mob.unknown14]
        ld      d,[ix+#mob.unknown15]
        ld      c,e
        ld      b,d
        srl     d
        rr      e
        srl     d
        rr      e
        srl     d
        rr      e
        srl     d
        rr      e
        srl     d
        rr      e
        and     a
        sbc     hl,de
        sbc     a,$00
        ld      [ix+#mob.Yspeed+0],l
        ld      [ix+#mob.Yspeed+1],h
        ld      [ix+#mob.Ydirection],a
        ld      l,[ix+#mob.Y+0]
        ld      h,[ix+#mob.Y+1]
        xor     a`zero
        ld      de,$0008
        sbc     hl,de
        jr      c,._16
        ld      l,c
        ld      h,b
        ld      de,$0010
        xor     a`zero
        sbc     hl,de
        ld      [ix+#mob.unknown14],l
        ld      [ix+#mob.unknown15],h
        ret     nc
._16    ld      [ix+#mob.Yspeed+0],a`zero
        ld      [ix+#mob.Yspeed+1],a`zero
        ld      [ix+#mob.Ydirection],a`zero
        res     1,[ix+#mob.unknown11]
        set     2,[ix+#mob.unknown11]
        ld      [ix+$12],$00
        ret

        ;UNKNOWN
._6157  BYTE $00 $00 $00 $00 $00 $00 $03 $03 $03 $03 $03 $03 $02 $02 $02 $02
        BYTE $02 $02 $04 $04 $04 $04 $04 $04 $FF $00 $00 $FF $00 $00 $00 $00
        BYTE $00 $00 $00 $03 $03 $03 $03 $03 $03 $02 $02 $02 $02 $02 $02 $01
        BYTE $01 $01 $01 $01 $01 $FF $12 $00 $00 $00 $00 $00 $00 $03 $03 $03
        BYTE $03 $03 $03 $02 $02 $02 $02 $02 $02 $05 $05 $05 $05 $05 $05 $FF
        BYTE $12 $00 $00 $00 $00 $00 $00 $03 $03 $03 $03 $03 $03 $02 $02 $02
        BYTE $02 $02 $02 $06 $06 $06 $06 $06 $06 $FF $12 $00 $00 $00 $00 $00
        BYTE $00 $03 $03 $03 $03 $03 $03 $02 $02 $02 $02 $02 $02 $07 $07 $07
        BYTE $07 $07 $07 $FF $12
        
        ;these are sprite layouts
._61dc  BYTE $4E, $50, $52, $54, $FF, $FF
        BYTE $6E, $70, $72, $74, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $08, $0A, $0C, $0E, $FF, $FF
        BYTE $28, $2A, $2C, $2E, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $FE, $12, $14, $FF, $FF, $FF
        BYTE $FE, $32, $34, $FF, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $16, $18, $1A, $1C, $FF, $FF
        BYTE $36, $38, $3A, $3C, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $56, $58, $5A, $5C, $FF, $FF
        BYTE $76, $78, $7A, $7C, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $00, $02, $04, $06, $FF, $FF
        BYTE $20, $22, $24, $26, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $4E, $4A, $4C, $54, $FF, $FF
        BYTE $6E, $6A, $6C, $74, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF

        BYTE $4E, $46, $48, $54, $FF, $FF
        BYTE $6E, $66, $68, $74, $FF, $FF
        BYTE $FE, $42, $44, $FF, $FF, $FF
        
        ;--------------------------------------------------------------------[$626C]---
        
.S1_EndSign_Palette
        BYTE $38 $20 $35 $1B $16 $2A $00 $3F $03 $0F $01 $00 $00 $00 $00 $00

}